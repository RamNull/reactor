name: PR Review Agent

on:
  pull_request:
    types: [opened, synchronize, reopened]
  pull_request_review_comment:
    types: [created]
  issue_comment:
    types: [created]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  review:
    runs-on: ubuntu-latest
    name: Automated PR Review
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Get PR details
        id: pr-details
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            
            core.setOutput('title', pr.title);
            core.setOutput('body', pr.body || '');
            core.setOutput('files_count', files.length);
            core.setOutput('additions', pr.additions);
            core.setOutput('deletions', pr.deletions);
            
            return {
              title: pr.title,
              filesChanged: files.length,
              additions: pr.additions,
              deletions: pr.deletions
            };
      
      - name: Check PR size
        id: check-size
        uses: actions/github-script@v7
        with:
          script: |
            const additions = parseInt('${{ steps.pr-details.outputs.additions }}');
            const deletions = parseInt('${{ steps.pr-details.outputs.deletions }}');
            const totalChanges = additions + deletions;
            
            let sizeLabel = '';
            let sizeComment = '';
            
            if (totalChanges < 50) {
              sizeLabel = 'size/XS';
              sizeComment = '✅ This is a very small PR. Great for quick reviews!';
            } else if (totalChanges < 200) {
              sizeLabel = 'size/S';
              sizeComment = '✅ This is a small PR. Should be easy to review.';
            } else if (totalChanges < 500) {
              sizeLabel = 'size/M';
              sizeComment = '⚠️ This is a medium-sized PR. Consider breaking it into smaller PRs if possible.';
            } else if (totalChanges < 1000) {
              sizeLabel = 'size/L';
              sizeComment = '⚠️ This is a large PR. Please consider breaking it into smaller, focused PRs.';
            } else {
              sizeLabel = 'size/XL';
              sizeComment = '🚨 This is a very large PR. It will be difficult to review. Please break it into smaller PRs.';
            }
            
            core.setOutput('size_label', sizeLabel);
            core.setOutput('size_comment', sizeComment);
      
      - name: Post review comment
        uses: actions/github-script@v7
        with:
          script: |
            const filesCount = parseInt('${{ steps.pr-details.outputs.files_count }}');
            const additions = parseInt('${{ steps.pr-details.outputs.additions }}');
            const deletions = parseInt('${{ steps.pr-details.outputs.deletions }}');
            const sizeComment = '${{ steps.check-size.outputs.size_comment }}';
            
            const reviewComment = `## 🤖 Automated PR Review
            
            ### PR Statistics
            - **Files changed:** ${filesCount}
            - **Lines added:** +${additions}
            - **Lines deleted:** -${deletions}
            - **Total changes:** ${additions + deletions}
            
            ### Size Assessment
            ${sizeComment}
            
            ### Checklist
            Please ensure the following before merging:
            - [ ] Code follows the project's coding standards
            - [ ] Tests have been added/updated
            - [ ] Documentation has been updated (if needed)
            - [ ] All CI checks pass
            - [ ] PR has been reviewed by at least one team member
            
            ---
            *This is an automated review. Please reach out to maintainers if you have questions.*`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: reviewComment
            });
      
      - name: Add size label
        uses: actions/github-script@v7
        with:
          script: |
            const sizeLabel = '${{ steps.check-size.outputs.size_label }}';
            
            // Remove existing size labels
            const { data: labels } = await github.rest.issues.listLabelsOnIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            
            for (const label of labels) {
              if (label.name.startsWith('size/')) {
                await github.rest.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  name: label.name
                });
              }
            }
            
            // Add new size label
            try {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: [sizeLabel]
              });
            } catch (error) {
              // Label might not exist, try to create it
              const colors = {
                'size/XS': '00ff00',
                'size/S': '90EE90',
                'size/M': 'FFD700',
                'size/L': 'FFA500',
                'size/XL': 'FF0000'
              };
              
              await github.rest.issues.createLabel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                name: sizeLabel,
                color: colors[sizeLabel] || 'CCCCCC',
                description: `Pull request size: ${sizeLabel.split('/')[1]}`
              });
              
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: [sizeLabel]
              });
            }

  copilot-response:
    runs-on: ubuntu-latest
    name: Copilot Interactive Response
    if: github.event_name == 'pull_request_review_comment' || github.event_name == 'issue_comment'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          
      - name: Analyze comment and context
        id: analyze-comment
        uses: actions/github-script@v7
        with:
          script: |
            let comment, prNumber, commentBody, filePath, lineNumber;
            
            if (context.eventName === 'pull_request_review_comment') {
              comment = context.payload.comment;
              prNumber = context.payload.pull_request.number;
              commentBody = comment.body;
              filePath = comment.path;
              lineNumber = comment.line || comment.original_line;
            } else if (context.eventName === 'issue_comment') {
              comment = context.payload.comment;
              prNumber = context.payload.issue.number;
              commentBody = comment.body;
              filePath = null;
              lineNumber = null;
            }
            
            // Check if comment mentions copilot or asks for help
            const mentionsCopilot = /(@copilot|copilot|help|explain|why|how|suggest|improve|fix)/i.test(commentBody);
            const isQuestion = /\?/.test(commentBody);
            const needsResponse = mentionsCopilot || isQuestion;
            
            console.log(`Comment: ${commentBody}`);
            console.log(`Needs response: ${needsResponse}`);
            console.log(`File: ${filePath}, Line: ${lineNumber}`);
            
            core.setOutput('needs_response', needsResponse);
            core.setOutput('comment_body', commentBody);
            core.setOutput('file_path', filePath || '');
            core.setOutput('line_number', lineNumber || '');
            core.setOutput('pr_number', prNumber);
            
            return { needsResponse, commentBody, filePath, lineNumber };
            
      - name: Get code context
        id: get-context
        if: steps.analyze-comment.outputs.needs_response == 'true' && steps.analyze-comment.outputs.file_path != ''
        uses: actions/github-script@v7
        with:
          script: |
            const filePath = '${{ steps.analyze-comment.outputs.file_path }}';
            const lineNumber = parseInt('${{ steps.analyze-comment.outputs.line_number }}') || 1;
            
            try {
              // Get file content
              const { data: fileContent } = await github.rest.repos.getContent({
                owner: context.repo.owner,
                repo: context.repo.repo,
                path: filePath,
                ref: context.sha
              });
              
              const content = Buffer.from(fileContent.content, 'base64').toString();
              const lines = content.split('\n');
              
              // Get context around the line (±10 lines)
              const startLine = Math.max(0, lineNumber - 10);
              const endLine = Math.min(lines.length - 1, lineNumber + 10);
              const contextLines = lines.slice(startLine, endLine + 1);
              
              const contextWithNumbers = contextLines.map((line, index) => {
                const actualLineNumber = startLine + index + 1;
                const marker = actualLineNumber === lineNumber ? ' >>> ' : '     ';
                return `${actualLineNumber}${marker}${line}`;
              }).join('\n');
              
              core.setOutput('code_context', contextWithNumbers);
              core.setOutput('file_extension', filePath.split('.').pop());
              
              return { success: true, contextLines: contextLines.length };
            } catch (error) {
              console.error('Error getting file context:', error);
              core.setOutput('code_context', '');
              return { success: false, error: error.message };
            }
            
      - name: Generate AI response
        id: ai-response
        if: steps.analyze-comment.outputs.needs_response == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const commentBody = '${{ steps.analyze-comment.outputs.comment_body }}';
            const filePath = '${{ steps.analyze-comment.outputs.file_path }}';
            const codeContext = '${{ steps.get-context.outputs.code_context }}';
            const fileExtension = '${{ steps.get-context.outputs.file_extension }}';
            
            // Create contextual response based on comment type
            let response = '';
            
            if (filePath && codeContext) {
              // Code-specific response
              response = `## 🤖 Copilot Analysis\n\n`;
              response += `**File**: \`${filePath}\`\n\n`;
              
              if (/explain|why|how|what/i.test(commentBody)) {
                response += `### Code Explanation\n`;
                response += `Looking at the code context:\n\n`;
                response += `\`\`\`${fileExtension}\n${codeContext}\n\`\`\`\n\n`;
                
                if (fileExtension === 'java') {
                  response += `**Analysis for Spring Boot Reactive Code:**\n`;
                  if (/Mono|Flux/.test(codeContext)) {
                    response += `- This appears to be reactive code using Project Reactor\n`;
                    response += `- Consider error handling with \`.onErrorReturn()\` or \`.onErrorResume()\`\n`;
                    response += `- Ensure non-blocking operations throughout the chain\n`;
                  }
                  if (/WebClient/.test(codeContext)) {
                    response += `- WebClient usage detected - good for non-blocking HTTP calls\n`;
                    response += `- Consider adding timeout and retry mechanisms\n`;
                  }
                  if (/Repository/.test(codeContext)) {
                    response += `- Repository pattern detected\n`;
                    response += `- Ensure you're using ReactiveMongoRepository for non-blocking DB operations\n`;
                  }
                }
              } else if (/suggest|improve|fix|better/i.test(commentBody)) {
                response += `### Suggestions for Improvement\n`;
                response += `Based on the code context, here are some recommendations:\n\n`;
                
                if (fileExtension === 'java') {
                  response += `**Spring Boot Reactive Best Practices:**\n`;
                  response += `- ✅ Use proper error handling in reactive streams\n`;
                  response += `- ✅ Avoid blocking operations like \`.block()\`\n`;
                  response += `- ✅ Use appropriate schedulers for different operations\n`;
                  response += `- ✅ Consider backpressure handling for high-throughput scenarios\n`;
                  response += `- ✅ Add comprehensive tests using StepVerifier\n\n`;
                }
                
                response += `**Code Quality:**\n`;
                response += `- Add proper logging for debugging\n`;
                response += `- Include comprehensive error messages\n`;
                response += `- Consider adding metrics and monitoring\n`;
              } else if (/test|testing/i.test(commentBody)) {
                response += `### Testing Recommendations\n`;
                response += `For reactive Spring Boot applications:\n\n`;
                response += `\`\`\`java\n`;
                response += `@Test\n`;
                response += `void testReactiveEndpoint() {\n`;
                response += `    StepVerifier.create(yourReactiveMethod())\n`;
                response += `        .expectNext(expectedValue)\n`;
                response += `        .verifyComplete();\n`;
                response += `}\n`;
                response += `\`\`\`\n`;
              }
            } else {
              // General response
              response = `## 🤖 Copilot Response\n\n`;
              response += `I'm here to help with your Spring Boot reactive application!\n\n`;
              
              if (/help/i.test(commentBody)) {
                response += `### How I can assist:\n`;
                response += `- **Code Review**: Analyze reactive patterns and Spring Boot best practices\n`;
                response += `- **Suggestions**: Provide improvements for Mono/Flux usage\n`;
                response += `- **Debugging**: Help identify blocking operations or performance issues\n`;
                response += `- **Testing**: Recommend reactive testing strategies with StepVerifier\n`;
                response += `- **Security**: Identify potential vulnerabilities\n\n`;
                response += `💡 **Tip**: Comment on specific lines of code for targeted analysis!\n`;
              }
            }
            
            response += `\n---\n`;
            response += `*🔄 This is an interactive Copilot response. Ask follow-up questions for more details!*`;
            
            core.setOutput('ai_response', response);
            return { responseGenerated: true, responseLength: response.length };
            
      - name: Post Copilot response
        if: steps.analyze-comment.outputs.needs_response == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const response = '${{ steps.ai-response.outputs.ai_response }}';
            const prNumber = parseInt('${{ steps.analyze-comment.outputs.pr_number }}');
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: response
            });
            
            console.log('Posted Copilot response to PR #' + prNumber);
            
      - name: Resolve discussion if applicable
        if: steps.analyze-comment.outputs.needs_response == 'true' && github.event_name == 'pull_request_review_comment'
        uses: actions/github-script@v7
        with:
          script: |
            const commentBody = '${{ steps.analyze-comment.outputs.comment_body }}';
            
            // Auto-resolve if comment indicates resolution
            if (/resolved|fixed|done|thanks|good/i.test(commentBody)) {
              try {
                // Note: GitHub's API doesn't directly support resolving conversations
                // This would need to be done through GraphQL API in a more advanced implementation
                console.log('Comment suggests resolution - consider implementing GraphQL API call');
              } catch (error) {
                console.log('Could not auto-resolve discussion:', error.message);
              }
            }
